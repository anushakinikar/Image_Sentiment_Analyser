# -*- coding: utf-8 -*-
"""train.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_dGk4p6V3DHAgn9zuHr7sag5PHSuEIS6
"""

import numpy as np
import os
from PIL import Image
from sklearn.model_selection import train_test_split
from tensorflow.keras import layers, models
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import RandomFlip, RandomRotation, RandomZoom, RandomHeight, RandomWidth
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.utils import to_categorical

def load_images(folder):
    images = []
    labels = []
    label_map = {'angry': 0, 'happy': 1, 'sad': 2, 'neutral': 3}
    for subfolder in os.listdir(folder):
        subfolder_path = os.path.join(folder, subfolder)
        print(f"Processing {subfolder_path}")
        if os.path.isdir(subfolder_path):
            for filename in os.listdir(subfolder_path):
                img = Image.open(os.path.join(subfolder_path, filename))
                img = img.resize((100, 100))
                img = np.array(img)
                if img is not None:
                    images.append(img)
                    labels.append(label_map[subfolder])
    return images, labels

train_images, train_labels = load_images('images/train')

val_images, val_labels = load_images('images/validation')

X_train = np.array(train_images)
Y_train = np.array(train_labels)

X_val = np.array(val_images)
Y_val = np.array(val_labels)

X_train = X_train / 255.0
X_val = X_val / 255.0

Y_train = to_categorical(Y_train, num_classes=4)
Y_val = to_categorical(Y_val, num_classes=4)

model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(100, 100, 3)),
    layers.MaxPooling2D((2, 2)),

    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),

    layers.Conv2D(128, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),

    layers.Flatten(),

    layers.Dense(128, activation='relu'),
    layers.Dropout(0.1),
    layers.Dense(32, activation='relu'),
    layers.Dense(4, activation='softmax')
])


model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

model.fit(X_train, Y_train, epochs=10, batch_size=64, validation_data=(X_val, Y_val))

loss, accuracy = model.evaluate(X_val, Y_val)
print("Validation Loss:", loss)
print("Validation Accuracy:", accuracy)

model.save('face_expression_classification_model.h5')